import org.owasp.dependencycheck.reporting.ReportGenerator

buildscript {
    // include dependency versions from explicit dependencies.gradle file
    apply from: 'dependencies.gradle'
}

plugins {
    id 'ca.cutterslade.analyze' version '1.9.1'
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id 'org.springframework.boot' version '3.2.4' apply false
    id 'org.owasp.dependencycheck' version '9.1.0'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'com.bmuschko.docker-spring-boot-application' version '9.4.0' apply false
}

applyDotEnvFileAsGradleProperties()

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'com.diffplug.spotless'

    group 'io.github.springwolf'
    version System.getProperty("SPRINGWOLF_VERSION")

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += ['-Xlint:deprecation']
    }

    javadoc {
        // Disable: warning: no comment
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    repositories {
        // For local development with snapshots
        mavenLocal() {
            content {
                includeGroup "io.github.springwolf"
            }
        }

        mavenCentral()

        maven { url "https://packages.confluent.io/maven/" }
    }

    spotless {
        encoding 'UTF-8'

        java {
            targetExclude 'build/**'
            palantirJavaFormat()

            licenseHeader("// SPDX-License-Identifier: Apache-2.0", "package|import|public")

            importOrder('', 'javax', 'java', '\\#')
            replaceRegex("Remove wildcard imports", "import( static)?\\s+[^*\\s]+\\*;(\\r\\n|\\r|\\n)", "\$2")
            removeUnusedImports()

            trimTrailingWhitespace()
            endWithNewline()
        }
    }

    test {
        dependsOn spotlessApply // Automatically fix code formatting if possible

        minHeapSize = "128m" // initial heap size
        maxHeapSize = "1024m" // maximum heap size

        useJUnitPlatform()
        testLogging {
            // showStandardStreams = true

            events "skipped", "failed"
            exceptionFormat = 'full'
        }
    }

    tasks.register('unitTest', Test) {
        enabled = !it.project.name.contains("-example") // Examples do not contain unit tests and would fail otherwise
        dependsOn spotlessApply // Automatically fix code formatting if possible

        description = 'Run only unit tests (excludes **IntegrationTest and **SystemTest)'
        group = 'verification'

        useJUnitPlatform()
        filter {
            excludePatterns = ['*IntegrationTest', '*SystemTest']
        }
        testLogging {
            // showStandardStreams = true

            events "skipped", "failed"
            exceptionFormat = 'full'
        }
    }


    tasks.register('integrationTest', Test) {
        dependsOn spotlessApply // Automatically fix code formatting if possible

        description = 'Run integration tests (excludes **SystemTest)'
        group = 'verification'

        useJUnitPlatform()
        filter {
            excludePatterns = ['*SystemTest']
        }
        testLogging {
            // showStandardStreams = true

            events "skipped", "failed"
            exceptionFormat = 'full'
        }
    }

    var addons = [
            'springwolf-common-model-converters' ,
            'springwolf-generic-binding' ,
            'springwolf-json-schema',
            'springwolf-kotlinx-serialization-model-converter'
    ]
    var bindings = [
            'springwolf-googlepubsub-binding',
            'springwolf-sns-binding',
            'springwolf-sqs-binding'
    ]
    var plugins = [
            'springwolf-amqp',
            'springwolf-cloud-stream',
            'springwolf-jms',
            'springwolf-kafka',
            'springwolf-sns',
            'springwolf-sqs'
    ]
    var publishingEnabled = (
            project.name == 'springwolf-asyncapi' ||
            project.name == 'springwolf-core' ||
            project.name == 'springwolf-ui' ||
            addons.contains(project.name) ||
            plugins.contains(project.name) ||
            bindings.contains(project.name)
    )
    tasks.withType(PublishToMavenRepository).configureEach { it.enabled = publishingEnabled }
    tasks.withType(PublishToMavenLocal).configureEach { it.enabled = publishingEnabled }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifactId project.name
                groupId project.group
                version project.version

                pom {
                    name = ''
                    description = ''
                    url = 'https://www.springwolf.dev'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'stavshamir'
                            name = 'Stav Shamir'
                            email = 'shamir.stav@gmail.com'
                        }

                        developer {
                            id = 'timonback'
                            name = 'Timon Back'
                            email = 'timon.back+springwolf@gmail.com'
                        }

                        developer {
                            id = 'sam0r040'
                            name = 'David MÃ¼ller'
                            email = 'david.mueller@codecentric.de'
                        }

                        developer {
                            id = 'ctasada'
                            name = 'Carlos Tasada'
                            email = 'ctasada@gmail.com'
                        }
                    }

                    scm {
                        url = 'https://github.com/springwolf/springwolf-core'
                    }
                }
            }
        }

        repositories {
            maven {
                url = project.findProperty('MAVEN_URL')
                credentials {
                    username = project.findProperty('MAVEN_USERNAME') ?: ''
                    password = project.findProperty('MAVEN_PASSWORD') ?: ''
                }
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("publish") }
        def signingKey = project.findProperty("SIGNINGKEY")
        def signingPassword = project.findProperty("SIGNINGPASSWORD")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }

    tasks.register('updateAsyncApiJson') {
        group 'verification'
        description 'Update the AsyncAPI JSON files in the examples to match the current state of the plugin'

        plugins.forEach {
            project
                    .file('springwolf-examples/' + it + '-example/src/test/resources/asyncapi.actual.json')
                    .renameTo('springwolf-examples/' + it + '-example/src/test/resources/asyncapi.json')
        }
    }
}

dependencyCheck {
    outputDirectory = "${rootProject.layout.buildDirectory}/reports/owasp-dependency-check"
    formats = [ReportGenerator.Format.SARIF.toString()]
    nvd.apiKey = project.findProperty("OWASP_API_KEY")
    analyzers.ossIndex.warnOnlyOnRemoteErrors = true
    analyzers.assemblyEnabled = false
    analyzers.nodeEnabled = false
    analyzers.nodeAudit.enabled = false
    analyzers.nodeAudit.yarnEnabled = false
}

def static readEnvFile(path = ".env") {
    def env = [:]

    def file = new File(path)
    if (file.exists()) {
        file.eachLine { line ->
            line = line.trim()
            if (line != "" && !line.startsWith("#")) {
                def pair = line.split("=", 2)
                env[pair[0].trim()] = pair.length == 2 ? pair[1].trim() : ""
            }
        }
    }

    return env
}

def static applyDotEnvFileAsGradleProperties() {
    readEnvFile().each { key, value -> if (System.getProperty(key as String) == null) { System.setProperty(key as String, value as String) } }
}
