plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'

    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'ca.cutterslade.analyze'
}

def isSnapshot = Boolean.valueOf(project.findProperty('SNAPSHOT'))

group 'io.github.springwolf'
version '0.3.1' + (isSnapshot ? '-SNAPSHOT' : '')

ext {
    set('springCloudVersion', "2022.0.1")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    api project(":springwolf-core")

    implementation "com.asyncapi:asyncapi-core:${asyncapiCoreVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jApiVersion}"

    implementation "org.springframework:spring-context"
    implementation "org.springframework.cloud:spring-cloud-stream"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"

    testImplementation "org.assertj:assertj-core:${assertjCoreVersion}"
    testImplementation "org.apache.kafka:kafka-streams:${kafkaStreamsVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoCoreVersion}"

    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.springframework:spring-beans"
    testImplementation "org.springframework:spring-test"
}

jar {
    enabled = true
    archiveClassifier = ''
}
bootJar.enabled = false

java {
    withJavadocJar()
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifactId 'springwolf-cloud-stream'
            groupId project.group
            version project.version

            pom {
                name = 'springwolf-cloud-stream'
                description = 'Automated JSON API documentation for Spring Boot cloud stream functions'
                url = 'https://www.springwolf.dev'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'stavshamir'
                        name = 'Stav Shamir'
                        email = 'shamir.stav@gmail.com'
                    }

                    developer {
                        id = 'timonback'
                        name = 'Timon Back'
                        email = 'timon.back+springwolf@gmail.com'
                    }

                    developer {
                        id = 'sam0r040'
                        name = 'David MÃ¼ller'
                        email = 'david.mueller@codecentric.de'
                    }
                }

                scm {
                    url = 'https://github.com/springwolf/springwolf-core'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.findProperty('MAVEN_USERNAME') ?: ''
                password = project.findProperty('MAVEN_PASSWORD') ?: ''
            }
        }
    }
}

signing {
    def signingKey = project.findProperty("SIGNINGKEY")
    def signingPassword = project.findProperty("SIGNINGPASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
