#########
# Spring configuration
spring.application.name=Springwolf example project - Kafka Protobuf

# Root logger option
log4j.rootLogger=INFO, stdout

# Direct log messages to stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1} - %m%n


spring.kafka.consumer.group-id=test
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.bootstrap-servers=${BOOTSTRAP_SERVER:192.168.2.107:63373}
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer
spring.kafka.consumer.properties.schema.registry.url=${SCHEMA_SERVER:http://192.168.2.107:63375}
spring.kafka.consumer.properties.derive.type=true

spring.kafka.producer.retries=1
spring.kafka.producer.bootstrap-servers=${BOOTSTRAP_SERVER:192.168.2.107:63373}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer
spring.kafka.producer.properties.schema.registry.url=${SCHEMA_SERVER:http://192.168.2.107:63375}
spring.kafka.producer.client-id=producer1


#########
# Springwolf configuration
springwolf.enabled=true
springwolf.init-mode=background
springwolf.docket.base-package=io.github.stavshamir.springwolf.example.kafka
springwolf.docket.info.title=${spring.application.name}
springwolf.docket.info.version=1.0.0
springwolf.docket.info.description=Springwolf example project to demonstrate springwolfs abilities
springwolf.docket.info.terms-of-service=http://asyncapi.org/terms
springwolf.docket.info.contact.name=springwolf
springwolf.docket.info.contact.email=example@example.com
springwolf.docket.info.contact.url=https://github.com/springwolf/springwolf-core
springwolf.docket.info.license.name=Apache License 2.0
springwolf.payload.extractable-classes.java.util.List=0
springwolf.payload.extractable-classes.java.util.Optional=0
springwolf.use-fqn=true
springwolf.example-generator=false

# Springwolf kafka configuration
springwolf.docket.servers.kafka.protocol=kafka
springwolf.docket.servers.kafka.url=${spring.kafka.producer.bootstrap-servers}
springwolf.plugin.kafka.scanner.kafka-listener.enabled=true
springwolf.plugin.kafka.publishing.enabled=true
springwolf.plugin.kafka.publishing.producer.bootstrap-servers=${BOOTSTRAP_SERVER:192.168.2.107:63373}
springwolf.plugin.kafka.publishing.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
springwolf.plugin.kafka.publishing.producer.value-serializer=io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer
springwolf.plugin.kafka.publishing.producer.properties.schema.registry.url=${SCHEMA_SERVER:http://192.168.2.107:63375}
# springwolf publisher has its own kafka configuration.
