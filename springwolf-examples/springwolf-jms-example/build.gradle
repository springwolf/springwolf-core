import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java'

    alias libs.plugins.spring.boot
    alias libs.plugins.cutterslade.analyze

    alias libs.plugins.docker.spring.boot
}

dependencies {
    implementation project(":springwolf-core")
    implementation project(":springwolf-add-ons:springwolf-generic-binding")
    implementation project(":springwolf-plugins:springwolf-jms")
    permitUnusedDeclared project(":springwolf-plugins:springwolf-jms")
    permitUsedUndeclared project(":springwolf-bindings:springwolf-jms-binding")

    annotationProcessor project(":springwolf-plugins:springwolf-jms")
    runtimeOnly project(":springwolf-ui")

    compileOnly libs.jakarta.jms.api

    annotationProcessor libs.lombok
    compileOnly libs.lombok

    implementation libs.slf4j.api

    implementation libs.swagger.annotations.jakarta

    compileOnly platform(SpringBootPlugin.BOM_COORDINATES)
    implementation platform(SpringBootPlugin.BOM_COORDINATES)
    implementation libs.spring.context
    implementation libs.spring.jms
    implementation libs.spring.boot
    implementation libs.spring.boot.autoconfigure

    runtimeOnly libs.spring.boot.starter.web
    runtimeOnly libs.spring.boot.starter.artemis

    testImplementation libs.mockito.core

    testImplementation libs.spring.boot.test
    testImplementation libs.spring.beans
    testImplementation libs.spring.web
    testImplementation libs.spring.test

    testImplementation libs.testcontainers
    testImplementation libs.testcontainers.junit.jupiter

    testAnnotationProcessor libs.lombok
    testCompileOnly libs.lombok

    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter
}

docker {
    springBootApplication {
        maintainer = 'shamir.stav@gmail.com'
        baseImage = 'eclipse-temurin:17-jre-focal'
        ports = [8080]
        images = ["stavshamir/springwolf-jms-example:${project.version}"]
    }

    registryCredentials {
        username = project.findProperty('DOCKERHUB_USERNAME') ?: ''
        password = project.findProperty('DOCKERHUB_TOKEN') ?: ''
    }
}

test {
    dependsOn dockerBuildImage
}
