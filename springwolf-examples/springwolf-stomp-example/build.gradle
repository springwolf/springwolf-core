plugins {
    id 'java'

    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'ca.cutterslade.analyze'

    id 'com.bmuschko.docker-spring-boot-application' version '9.3.2'
}

dependencies {
    implementation project(":springwolf-core")
//    implementation project(":springwolf-plugins:springwolf-stomp")

//    annotationProcessor project(":springwolf-plugins:springwolf-stomp")
    runtimeOnly project(":springwolf-ui")

    implementation "org.springframework.boot:spring-boot-starter-websocket" // TODO: move to plugin
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}" // TODO: move to plugin
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}" // TODO: move to plugin
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor" // TODO: move to plugin

    runtimeOnly "org.springframework.boot:spring-boot-starter-web"

    implementation "org.slf4j:slf4j-api:${slf4jApiVersion}"
    implementation "io.swagger.core.v3:swagger-annotations:${swaggerVersion}"

    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.springframework.boot:spring-boot"
    implementation "org.springframework:spring-context"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"

    testImplementation "com.vaadin.external.google:android-json:${androidJsonVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"

    testImplementation "org.mockito:mockito-core:${mockitoCoreVersion}"

    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.springframework:spring-beans"
    testImplementation "org.springframework:spring-web"
    testImplementation "org.springframework:spring-test"

    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
}

docker {
    springBootApplication {
        maintainer = 'shamir.stav@gmail.com'
        baseImage = 'eclipse-temurin:17-jre-focal'
        ports = [8080]
        images = ["stavshamir/springwolf-stomp-example:${project.version}"]
    }

    registryCredentials {
        username = project.findProperty('DOCKERHUB_USERNAME') ?: ''
        password = project.findProperty('DOCKERHUB_TOKEN') ?: ''
    }
}

test {
    dependsOn dockerBuildImage
    dependsOn spotlessApply // Automatically fix code formatting if possible

    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}
