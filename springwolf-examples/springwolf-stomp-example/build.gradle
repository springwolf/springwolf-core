import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java'

    alias libs.plugins.spring.boot
    alias libs.plugins.cutterslade.analyze

    alias libs.plugins.docker.spring.boot
}

dependencies {
    implementation project(":springwolf-core")
    implementation project(":springwolf-plugins:springwolf-stomp")
    permitUnusedDeclared project(":springwolf-plugins:springwolf-stomp")
    permitUsedUndeclared project(":springwolf-bindings:springwolf-stomp-binding")

    runtimeOnly project(":springwolf-ui")

    annotationProcessor libs.lombok
    testAnnotationProcessor libs.lombok
    compileOnly libs.lombok

    implementation platform(SpringBootPlugin.BOM_COORDINATES)
    implementation libs.spring.jcl
    implementation libs.spring.web
    implementation libs.spring.websocket

    implementation libs.spring.boot
    implementation libs.spring.boot.autoconfigure
    implementation libs.spring.context
    implementation libs.spring.messaging

    implementation libs.swagger.annotations.jakarta

    implementation libs.slf4j.api

    testImplementation libs.spring.boot.test
    testImplementation libs.spring.beans
    testImplementation libs.spring.core
    testImplementation libs.spring.web

    testImplementation libs.testcontainers
    testImplementation libs.testcontainers.junit.jupiter

    testImplementation libs.jakarta.annotation.api

    testAnnotationProcessor libs.lombok
    testCompileOnly libs.lombok

    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter
}

docker {
    springBootApplication {
        maintainer = 'shamir.stav@gmail.com'
        baseImage = 'eclipse-temurin:17-jre-focal'
        ports = [8080]
        images = ["stavshamir/springwolf-stomp-example:${project.version}"]
    }

    registryCredentials {
        username = project.findProperty('DOCKERHUB_USERNAME') ?: ''
        password = project.findProperty('DOCKERHUB_TOKEN') ?: ''
    }
}

test {
    dependsOn dockerBuildImage
}
