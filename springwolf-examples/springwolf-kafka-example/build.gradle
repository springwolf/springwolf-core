plugins {
    id 'java'

    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'

    id 'com.bmuschko.docker-spring-boot-application' version '8.1.0'
    id 'org.springdoc.openapi-gradle-plugin' version '1.6.0'
}

version '0.11.0'


repositories {
    // For local development with snapshots
    mavenLocal() {
        content {
            includeGroup "io.github.springwolf"
        }
    }

    mavenCentral()
}

dependencies {
    implementation project(":springwolf-plugins:springwolf-kafka-plugin")
    compileOnly project(":springwolf-plugins:springwolf-kafka-plugin")
    annotationProcessor project(":springwolf-plugins:springwolf-kafka-plugin")
    implementation project(":springwolf-add-ons:springwolf-common-model-converters")
    runtimeOnly 'io.github.springwolf:springwolf-ui:0.7.0'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.slf4j:slf4j-api'
    implementation 'org.javamoney:moneta:1.4.2'
    implementation 'io.swagger.core.v3:swagger-core:2.2.9'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.9.1'
    testImplementation 'org.testcontainers:testcontainers:1.17.6'
    testImplementation 'org.testcontainers:junit-jupiter:1.17.6'
    testImplementation 'org.skyscreamer:jsonassert:1.5.1'
    testImplementation 'commons-io:commons-io:2.11.0'
    testImplementation 'org.awaitility:awaitility:4.2.0'
}

docker {
    springBootApplication {
        maintainer = 'shamir.stav@gmail.com'
        baseImage = 'eclipse-temurin:17-jre-focal'
        ports = [8080]
        images = ["stavshamir/springwolf-kafka-example:${project.version}"]
    }

    registryCredentials {
        username = project.findProperty('dockerhubUsername') ?: ''
        password = project.findProperty('dockerhubPassword') ?: ''
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

test {
    dependsOn dockerBuildImage

    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

openApi {
    apiDocsUrl = "http://localhost:8080/springwolf/docs"
    // For testing purposes we put the generated json into the test resources, but it could be any other directory
    outputDir = file("$buildDir/resources/test")
    outputFileName = "openapi-generated.json"
}

// generate the open api docs before tests are executed so that if it works, the json is already there
test.dependsOn("generateOpenApiDocs")
