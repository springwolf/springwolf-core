plugins {
    id 'java'

    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'ca.cutterslade.analyze'

    id 'com.bmuschko.docker-spring-boot-application' version '8.1.0'
    id 'org.springdoc.openapi-gradle-plugin' version '1.6.0'
}

dependencies {
    implementation project(":springwolf-core")
    implementation project(":springwolf-plugins:springwolf-kafka-plugin")

    runtimeOnly project(":springwolf-add-ons:springwolf-common-model-converters")
    runtimeOnly project(":springwolf-ui")

    annotationProcessor project(":springwolf-plugins:springwolf-kafka-plugin")

    runtimeOnly "org.springframework.boot:spring-boot-starter-web"

    implementation "org.springframework:spring-beans"
    implementation "org.springframework:spring-context"
    implementation "org.springframework:spring-web"

    implementation "org.springframework.boot:spring-boot"
    implementation "org.springframework.boot:spring-boot-autoconfigure"

    implementation "org.springframework.kafka:spring-kafka"

    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-web"

    implementation "com.asyncapi:asyncapi-core:${asyncapiCoreVersion}"
    implementation "io.swagger.core.v3:swagger-annotations:${swaggerVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jApiVersion}"

    implementation "javax.money:money-api:${moneyApiVersion}"
    implementation "org.javamoney:moneta:${monetaVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"

    testImplementation "commons-io:commons-io:${commonsIoVersion}"
    testImplementation "com.vaadin.external.google:android-json:${androidJsonVersion}"

    testImplementation "org.apache.kafka:kafka-clients:${kafkaClientsVersion}@jar"
    testImplementation "org.assertj:assertj-core:${assertjCoreVersion}"
    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoCoreVersion}"

    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.springframework.kafka:spring-kafka-test"
    testImplementation "org.springframework:spring-test"

    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
    permitTestUnusedDeclared "org.apache.kafka:kafka-clients:${kafkaClientsVersion}:test@jar"
}

// We don't want to publish the examples
tasks.withType(PublishToMavenRepository).configureEach { it.enabled = false }
tasks.withType(PublishToMavenLocal).configureEach { it.enabled = false }

docker {
    springBootApplication {
        maintainer = 'shamir.stav@gmail.com'
        baseImage = 'eclipse-temurin:17-jre-focal'
        ports = [8080]
        images = ["stavshamir/springwolf-kafka-example:${project.version}"]
    }

    registryCredentials {
        username = project.findProperty('DOCKERHUB_USERNAME') ?: ''
        password = project.findProperty('DOCKERHUB_TOKEN') ?: ''
    }
}

test {
    dependsOn dockerBuildImage
    dependsOn spotlessApply // Automatically fix code formatting if possible

    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

spotless {
    encoding 'UTF-8'

    java {
        palantirJavaFormat()

        importOrder('', 'javax', 'java', '\\#')
        replaceRegex("Remove wildcard imports", "import\\s+[^\\*\\s]+\\*;(\\r\\n|\\r|\\n)", "\$1")
        removeUnusedImports()

        trimTrailingWhitespace()
        endWithNewline()
    }
}

openApi {
    apiDocsUrl = "http://localhost:8080/springwolf/docs"
    // For testing purposes we put the generated json into the test resources, but it could be any other directory
    outputDir = file("$buildDir/resources/test")
    outputFileName = "openapi-generated.json"
}

// generate the open api docs before tests are executed so that if it works, the json is already there
test.dependsOn("generateOpenApiDocs")
