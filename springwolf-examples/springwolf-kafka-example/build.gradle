plugins {
    id 'java'

    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'

    id 'com.bmuschko.docker-spring-boot-application' version '8.1.0'
    id 'org.springdoc.openapi-gradle-plugin' version '1.6.0'
}

def isSnapshot = Boolean.valueOf(project.findProperty('SNAPSHOT'))

group 'io.github.springwolf'
version '0.11.0' + (isSnapshot ? '-SNAPSHOT' : '')

dependencies {
    implementation project(":springwolf-plugins:springwolf-kafka-plugin")
    compileOnly project(":springwolf-plugins:springwolf-kafka-plugin")
    annotationProcessor project(":springwolf-plugins:springwolf-kafka-plugin")
    implementation project(":springwolf-add-ons:springwolf-common-model-converters")
    runtimeOnly project(":springwolf-ui")

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.kafka:spring-kafka"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.slf4j:slf4j-api"
    implementation "org.javamoney:moneta:${javaMoneyMonetaVersion}"
    implementation "io.swagger.core.v3:swagger-core-jakarta:${swaggerCoreVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.kafka:spring-kafka-test"
    testImplementation "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.skyscreamer:jsonassert:${jsonAssertVersion}"
    testImplementation "commons-io:commons-io:${commonsIoVersion}"
    testImplementation "org.awaitility:awaitility:${awaitabilityVersion}"
}

docker {
    springBootApplication {
        maintainer = 'shamir.stav@gmail.com'
        baseImage = 'eclipse-temurin:17-jre-focal'
        ports = [8080]
        images = ["stavshamir/springwolf-kafka-example:${project.version}"]
    }

    registryCredentials {
        username = project.findProperty('DOCKERHUB_USERNAME') ?: ''
        password = project.findProperty('DOCKERHUB_TOKEN') ?: ''
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

test {
    dependsOn dockerBuildImage

    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

openApi {
    apiDocsUrl = "http://localhost:8080/springwolf/docs"
    // For testing purposes we put the generated json into the test resources, but it could be any other directory
    outputDir = file("$buildDir/resources/test")
    outputFileName = "openapi-generated.json"
}

// generate the open api docs before tests are executed so that if it works, the json is already there
test.dependsOn("generateOpenApiDocs")
