import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java'

    alias libs.plugins.spring.boot
    alias libs.plugins.cutterslade.analyze

    alias libs.plugins.docker.spring.boot
}

dependencies {
    implementation project(":springwolf-core")
    implementation project(":springwolf-plugins:springwolf-sns")
    permitUnusedDeclared project(":springwolf-plugins:springwolf-sns")
    permitUsedUndeclared project(":springwolf-bindings:springwolf-sns-binding")

    annotationProcessor project(":springwolf-plugins:springwolf-sns")
    runtimeOnly project(":springwolf-add-ons:springwolf-json-schema")
    runtimeOnly project(":springwolf-ui")

    annotationProcessor libs.lombok
    compileOnly libs.lombok

    runtimeOnly libs.spring.boot.starter.web

    implementation libs.slf4j.api
    implementation libs.swagger.annotations.jakarta

    runtimeOnly platform(libs.spring.cloud.aws.dependencies)
    implementation platform(libs.spring.cloud.aws.dependencies)
    implementation libs.spring.cloud.aws.sns
    runtimeOnly libs.spring.cloud.aws.starter.sns

    implementation platform(SpringBootPlugin.BOM_COORDINATES)
    implementation libs.spring.boot.autoconfigure
    implementation libs.spring.boot
    implementation libs.spring.context
    implementation libs.spring.messaging

    testImplementation libs.spring.boot.test
    testImplementation libs.spring.beans
    testImplementation libs.spring.web
    testImplementation libs.spring.test

    testImplementation libs.testcontainers
    testImplementation libs.testcontainers.junit.jupiter
    testImplementation libs.testcontainers.localstack

    testAnnotationProcessor libs.lombok
    testCompileOnly libs.lombok

    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter
}

docker {
    springBootApplication {
        maintainer = 'shamir.stav@gmail.com'
        baseImage = 'eclipse-temurin:17-jre-focal'
        ports = [8080]
        images = ["stavshamir/springwolf-sns-example:${project.version}"]
    }

    registryCredentials {
        username = project.findProperty('DOCKERHUB_USERNAME') ?: ''
        password = project.findProperty('DOCKERHUB_TOKEN') ?: ''
    }
}

test {
    dependsOn dockerBuildImage
}
