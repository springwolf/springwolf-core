plugins {
    id 'java'

    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'ca.cutterslade.analyze'

    id 'com.bmuschko.docker-spring-boot-application'
}

dependencyManagement {
    imports {
        mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:3.1.1"
    }
}

dependencies {
    implementation project(":springwolf-core")
    implementation project(":springwolf-plugins:springwolf-sns")

    annotationProcessor project(":springwolf-plugins:springwolf-sns")
    runtimeOnly project(":springwolf-add-ons:springwolf-json-schema")
    runtimeOnly project(":springwolf-ui")

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    runtimeOnly "org.springframework.boot:spring-boot-starter-web"

    implementation "org.slf4j:slf4j-api:${slf4jApiVersion}"
    implementation "io.swagger.core.v3:swagger-annotations-jakarta:${swaggerVersion}"

    implementation 'io.awspring.cloud:spring-cloud-aws-sns'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-sns'
    permitUnusedDeclared 'io.awspring.cloud:spring-cloud-aws-starter-sns'
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.springframework.boot:spring-boot"
    implementation "org.springframework:spring-context"
    implementation "org.springframework:spring-messaging"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"

    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.springframework:spring-beans"
    testImplementation "org.springframework:spring-web"
    testImplementation "org.springframework:spring-test"

    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:localstack:${testcontainersVersion}"

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
}

docker {
    springBootApplication {
        maintainer = 'shamir.stav@gmail.com'
        baseImage = 'eclipse-temurin:17-jre-focal'
        ports = [8080]
        images = ["stavshamir/springwolf-sns-example:${project.version}"]
    }

    registryCredentials {
        username = project.findProperty('DOCKERHUB_USERNAME') ?: ''
        password = project.findProperty('DOCKERHUB_TOKEN') ?: ''
    }
}

test {
    dependsOn dockerBuildImage
}
