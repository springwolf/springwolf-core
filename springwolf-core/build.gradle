plugins {
    id 'java'
    id 'java-library'

    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'ca.cutterslade.analyze'
}

dependencies {
    api "com.asyncapi:asyncapi-core:${asyncapiCoreVersion}"

    implementation("io.swagger:swagger-inflector:${swaggerInflectorVersion}") {
        // swagger-inflector (2.0.9) transiently pulls two swagger-core dependencies:
        // - io.swagger.core.v3:swagger-core  2.x
        // - io.swagger:swagger-core  1.6.9
        // these deps should be excluded because we need 'io.swagger.core.v3:swagger-core-jakarta 2.x'
        // Unfortunately, io.swagger.swagger-core is still used in one place in swagger-inflector (io.swagger.util.Json)
        // so we cannot exclude the old 'io.swagger:swagger-core 1.6.9' dependency. Instead, we exclude explicitly
        // the 'old' javax.validation groupId.

        exclude group: "io.swagger.core.v3"
        exclude group: "javax.validation"
    }

    implementation "io.swagger.core.v3:swagger-annotations-jakarta:${swaggerVersion}@jar"
    implementation "io.swagger.core.v3:swagger-core-jakarta:${swaggerVersion}"

    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"

    implementation "org.slf4j:slf4j-api:${slf4jApiVersion}"

    implementation "org.springframework.boot:spring-boot"
    implementation "org.springframework:spring-web"
    implementation "org.springframework:spring-context"
    implementation "org.springframework:spring-messaging"
    implementation "org.springframework:spring-beans"
    implementation "org.springframework:spring-core"
    implementation "org.springframework.boot:spring-boot-autoconfigure"

    implementation "io.swagger.core.v3:swagger-models-jakarta:${swaggerVersion}"
    implementation "jakarta.annotation:jakarta.annotation-api:${jakartaAnnotationApiVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testImplementation "org.assertj:assertj-core:${assertjCoreVersion}"
    testImplementation "com.vaadin.external.google:android-json:${androidJsonVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoCoreVersion}"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.springframework:spring-test"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
}

jar {
    enabled = true
    archiveClassifier = ''
}
bootJar.enabled = false

java {
    withJavadocJar()
    withSourcesJar()
}

test {
    dependsOn spotlessApply // Automatically fix code formatting if possible

    useJUnitPlatform()
}

spotless {
    encoding 'UTF-8'

    java {
        palantirJavaFormat()

        importOrder('', 'javax', 'java', '\\#')
        replaceRegex("Remove wildcard imports", "import\\s+[^\\*\\s]+\\*;(\\r\\n|\\r|\\n)", "\$1")
        removeUnusedImports()

        trimTrailingWhitespace()
        endWithNewline()
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'springwolf-core'
                description = 'Automated JSON API documentation for async APIs (Kafka etc.) interfaces built with Spring'
            }
        }
    }
}
