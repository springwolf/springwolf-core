plugins {
  id 'java'
  id 'com.github.node-gradle.node' version '2.2.4'
  id 'signing'
  id 'maven-publish'
}

group = 'io.github.springwolf'
version = '0.5.0' + (Boolean.valueOf(System.getProperty('snapshot')) ? '-SNAPSHOT' : '')
sourceCompatibility = '1.8'

node {
  version = '12.18.1'
  npmVersion = '6.14.5'
  download = true
}

npm_run_build {
  inputs.files fileTree("src")
  inputs.file 'angular.json'
  inputs.file 'package.json'
  inputs.file 'package-lock.json'

  outputs.dir 'build'
}

jar {
  dependsOn 'npm_run_build'
  metaInf { from 'dist/springwolf-ui' into 'resources/springwolf' }
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
}

signing {
  sign configurations.archives
}

def pomConfig = {
  licenses {
    license {
      name 'The Apache License, Version 2.0'
      url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    }
  }

  developers {
    developer {
      id 'stavshamir'
      name 'Stav Shamir'
      email 'shamir.stav@gmail.com'
    }
  }

  scm {
    url 'https://github.com/springwolf/springwolf-ui'
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact jar

      artifact sourcesJar {
        classifier "sources"
      }

      groupId project.group
      artifactId 'springwolf-ui'
      version project.version
      pom.withXml {
        def root = asNode()
        root.appendNode('description', 'Web UI for Springwolf')
        root.appendNode('name', 'springwolf-ui')
        root.appendNode('url', 'https://github.com/springwolf/springwolf-ui')
        root.children().last() + pomConfig

        def pomFile = file("${project.buildDir}/generated-pom.xml")
        writeTo(pomFile)
        def pomAscFile = signing.sign(pomFile).signatureFiles[0]
        artifact(pomAscFile) {
          classifier = null
          extension = 'pom.asc'
        }
      }

      project.tasks.signArchives.signatureFiles.each {
        artifact(it) {
          def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
          if (matcher.find()) {
            classifier = matcher.group(1)
          } else {
            classifier = null
          }
          extension = 'jar.asc'
        }
      }
    }
  }

  repositories {
    maven {
      url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
      credentials {
        username = project.findProperty('ossrhUsername') ?: ''
        password = project.findProperty('ossrhPassword') ?: ''
      }
    }
  }

  model {
    tasks.publishMavenJavaPublicationToMavenLocal {
      dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
      dependsOn project.tasks.signArchives
    }
  }
}
